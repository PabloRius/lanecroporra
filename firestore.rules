rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User documents
    match /users/{userId} {
      allow write: if request.auth != null && request.auth.uid == userId;
      
      allow read: if request.auth != null
    }

    // Groups main collection (holds subcollections)
    match /groups/{groupId} {
    
      // Root-level
      allow create: if request.auth != null
        && request.resource.data.creatorId == request.auth.uid

      allow delete: if request.auth != null
        && get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin"; 

      // PUBLIC subcollection
      match /public/{docId} {
        allow create: if request.auth != null
          && request.resource.data.creatorId == request.auth.uid

        allow delete: if request.auth != null
          && get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin"; 

        allow read: if request.auth != null;
      }

      // PRIVATE subcollection
      match /private/{docId} {
        allow create: if request.auth != null
          && get(/databases/$(database)/documents/groups/$(groupId)/public/data).data.creatorId == request.auth.uid;

        allow delete: if request.auth != null
          && get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin"; 

        allow read: if request.auth != null
          && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));

        allow update: if request.auth != null
         && get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin";

      }

      // MEMBERS subcollection
      match /members/{memberId} {
        allow read: if request.auth != null
          && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));

        allow update: if request.auth != null
          && request.auth.uid == memberId

        allow update: if request.auth != null
          && get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin";

        allow create: if request.auth != null
          && request.auth.uid == memberId
          && (
            get(/databases/$(database)/documents/groups/$(groupId)/public/data).data.creatorId == request.auth.uid
            ||
            (request.resource.data.inviteId is string
              && exists(/databases/$(database)/documents/invites/$(request.resource.data.inviteId))
              && get(/databases/$(database)/documents/invites/$(request.resource.data.inviteId)).data.used == false)
          );
          

        allow delete: if request.auth != null
          && (
            request.auth.uid == memberId
            ||
            get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin"
          )
      }
    }

    // Invite documents
    match /invites/{inviteId} {
      allow read: if request.auth != null;

      allow create: if request.auth != null
        && (
          get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)/private/data).data.creatorId == request.auth.uid
          || get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)/members/$(request.auth.uid)).data.role == "admin"
        );

      allow update: if request.auth != null
        && resource.data.used == false;
    }
  }
}
